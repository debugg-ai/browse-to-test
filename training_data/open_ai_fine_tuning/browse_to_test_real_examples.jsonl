{"input": "Navigate to the login page at https://example.com/login", "output": "await page.goto('https://example.com/login');"}
{"input": "Click the 'Sign In' button", "output": "await page.getByRole('button', { name: 'Sign In' }).click();"}
{"input": "Fill the email input field with 'user@example.com'", "output": "await page.getByLabel('Email').fill('user@example.com');"}
{"input": "Fill the password field with 'secret123'", "output": "await page.getByLabel('Password').fill('secret123');"}
{"input": "Check that the page title is 'Dashboard'", "output": "await expect(page).toHaveTitle('Dashboard');"}
{"input": "Verify that the welcome message is visible", "output": "await expect(page.getByText('Welcome')).toBeVisible();"}
{"input": "Click on the menu item with text 'Settings'", "output": "await page.getByText('Settings').click();"}
{"input": "Select 'Large' option from the size dropdown", "output": "await page.getByRole('button', { name: 'Large' }).click();"}
{"input": "Verify that the 'Save' button is disabled", "output": "await expect(page.getByRole('button', { name: 'Save' })).toBeDisabled();"}
{"input": "Check if the error message 'Invalid credentials' appears", "output": "await expect(page.getByText('Invalid credentials')).toBeVisible();"}
{"input": "Wait for the page to load completely", "output": "await page.waitForLoadState('networkidle');"}
{"input": "Set viewport size to 1024x768", "output": "await page.setViewportSize({ width: 1024, height: 768 });"}
{"input": "Take a screenshot and save it as 'login-page.png'", "output": "await page.screenshot({ path: 'login-page.png' });"}
{"input": "Hover over the profile avatar", "output": "await page.getByTestId('profile-avatar').hover();"}
{"input": "Double-click on the file name to edit", "output": "await page.getByText('filename.txt').dblclick();"}
{"input": "Press the Enter key", "output": "await page.keyboard.press('Enter');"}
{"input": "Type 'Hello World' into the text editor", "output": "await page.keyboard.type('Hello World');"}
{"input": "Clear the search input field", "output": "await page.getByPlaceholder('Search...').clear();"}
{"input": "Check that the checkbox is checked", "output": "await expect(page.getByRole('checkbox')).toBeChecked();"}
{"input": "Uncheck the 'Remember me' checkbox", "output": "await page.getByLabel('Remember me').uncheck();"}
{"input": "Select 'Red' from the color picker dropdown", "output": "await page.getByLabel('Color').selectOption('Red');"}
{"input": "Upload a file to the file input", "output": "await page.getByLabel('Upload file').setInputFiles('path/to/file.pdf');"}
{"input": "Verify the page URL contains '/dashboard'", "output": "await expect(page).toHaveURL(/.*\\/dashboard/);"}
{"input": "Check that exactly 5 items are displayed in the list", "output": "await expect(page.getByRole('listitem')).toHaveCount(5);"}
{"input": "Wait for the loading spinner to disappear", "output": "await page.getByTestId('loading-spinner').waitFor({ state: 'hidden' });"}
{"input": "Right-click on the table row to open context menu", "output": "await page.getByRole('row').first().click({ button: 'right' });"}
{"input": "Scroll to the bottom of the page", "output": "await page.evaluate(() => window.scrollTo(0, document.body.scrollHeight));"}
{"input": "Mock API response for GET /api/users with empty array", "output": "await page.route('**/api/users', route => route.fulfill({ json: [] }));"}
{"input": "Verify that the table contains the text 'John Doe'", "output": "await expect(page.getByRole('table')).toContainText('John Doe');"}
{"input": "Click the third item in the navigation menu", "output": "await page.getByRole('navigation').getByRole('link').nth(2).click();"}
{"input": "Fill form field 'First Name' with 'Alice'", "output": "await page.getByLabel('First Name').fill('Alice');"}
{"input": "Select multiple options 'Option A' and 'Option C' from multiselect", "output": "await page.getByLabel('Options').selectOption(['Option A', 'Option C']);"}
{"input": "Verify that an alert dialog appears with message 'Success'", "output": "page.on('dialog', dialog => { expect(dialog.message()).toBe('Success'); dialog.accept(); });"}
{"input": "Close the modal dialog by clicking the X button", "output": "await page.getByRole('dialog').getByLabel('Close').click();"}
{"input": "Drag element from source to target location", "output": "await page.getByTestId('source').dragTo(page.getByTestId('target'));"}
{"input": "Wait for element with text 'Processing...' to appear", "output": "await page.getByText('Processing...').waitFor();"}
{"input": "Check that input field has placeholder text 'Enter your name'", "output": "await expect(page.getByRole('textbox')).toHaveAttribute('placeholder', 'Enter your name');"}
{"input": "Verify button has class 'btn-primary'", "output": "await expect(page.getByRole('button')).toHaveClass(/btn-primary/);"}
{"input": "Click link that opens in new tab", "output": "const [newPage] = await Promise.all([context.waitForEvent('page'), page.getByText('Open in new tab').click()]);"}
{"input": "Focus on the email input field", "output": "await page.getByLabel('Email').focus();"}
{"input": "Verify that element is not visible", "output": "await expect(page.getByTestId('hidden-element')).not.toBeVisible();"}
{"input": "Check if element is attached to DOM", "output": "await expect(page.getByTestId('element')).toBeAttached();"}
{"input": "Reload the current page", "output": "await page.reload();"}
{"input": "Go back to previous page", "output": "await page.goBack();"}
{"input": "Go forward to next page", "output": "await page.goForward();"}
{"input": "Wait for navigation to complete after clicking", "output": "await Promise.all([page.waitForNavigation(), page.getByText('Submit').click()]);"}
{"input": "Set input value using JavaScript", "output": "await page.getByLabel('Amount').evaluate(el => el.value = '100');"}
{"input": "Get text content from an element", "output": "const text = await page.getByTestId('message').textContent();"}
{"input": "Verify element contains specific CSS value", "output": "await expect(page.getByTestId('header')).toHaveCSS('color', 'rgb(255, 0, 0)');"}
{"input": "Click button and wait for API response", "output": "await Promise.all([page.waitForResponse('**/api/save'), page.getByText('Save').click()]);"}
{"input": "Login user with credentials from environment variables", "output": "await page.getByLabel('Username').fill(process.env.TEST_USER!); await page.getByLabel('Password').fill(process.env.TEST_PASS!);"}
{"input": "Verify that dropdown menu is expanded", "output": "await expect(page.getByRole('menu')).toBeVisible();"}
{"input": "Close dropdown by pressing Escape key", "output": "await page.keyboard.press('Escape');"}
{"input": "Check that form validation error appears", "output": "await expect(page.getByText('This field is required')).toBeVisible();"}
{"input": "Scroll element into view", "output": "await page.getByTestId('footer').scrollIntoViewIfNeeded();"}
{"input": "Switch to iframe content", "output": "const frame = page.frameLocator('iframe[name=\"content\"]');"}
{"input": "Click element within specific iframe", "output": "await page.frameLocator('iframe').getByRole('button', { name: 'Submit' }).click();"}
{"input": "Verify page has no accessibility violations", "output": "await expect(page).toHaveNoViolations();"}
{"input": "Check that image is loaded", "output": "await expect(page.getByRole('img', { name: 'Profile picture' })).toBeVisible();"}
{"input": "Test responsive design by changing viewport", "output": "await page.setViewportSize({ width: 375, height: 667 });"}
{"input": "Verify mobile menu is visible on small screen", "output": "await expect(page.getByTestId('mobile-menu')).toBeVisible();"}
{"input": "Add cookie for user session", "output": "await context.addCookies([{ name: 'session', value: 'abc123', domain: 'example.com' }]);"}
{"input": "Clear all cookies", "output": "await context.clearCookies();"}
{"input": "Check local storage contains specific value", "output": "const value = await page.evaluate(() => localStorage.getItem('user-pref'));"}
{"input": "Set local storage item", "output": "await page.evaluate(() => localStorage.setItem('theme', 'dark'));"}
{"input": "Verify page title matches expected value", "output": "await expect(page).toHaveTitle(/Dashboard.*/);"}
{"input": "Check if page is accessible via keyboard navigation", "output": "await page.keyboard.press('Tab'); await expect(page.getByRole('button')).toBeFocused();"}
{"input": "Intercept network request and modify response", "output": "await page.route('**/api/data', route => route.fulfill({ json: { modified: true } }));"}
{"input": "Verify element has specific data attribute", "output": "await expect(page.getByTestId('item')).toHaveAttribute('data-id', '123');"}
{"input": "Check that element text matches pattern", "output": "await expect(page.getByTestId('counter')).toHaveText(/\\d+ items/);"}
{"input": "Wait for element to have specific text", "output": "await expect(page.getByTestId('status')).toHaveText('Complete');"}
{"input": "Verify form has been submitted successfully", "output": "await expect(page.getByText('Form submitted successfully')).toBeVisible();"}
{"input": "Check that pagination shows correct page number", "output": "await expect(page.getByTestId('current-page')).toHaveText('2');"}
{"input": "Navigate to next page using pagination", "output": "await page.getByRole('button', { name: 'Next page' }).click();"}
{"input": "Filter table by entering search term", "output": "await page.getByPlaceholder('Filter results').fill('John');"}
{"input": "Sort table by clicking column header", "output": "await page.getByRole('columnheader', { name: 'Date' }).click();"}
{"input": "Verify that table is sorted in ascending order", "output": "await expect(page.getByRole('columnheader', { name: 'Date' })).toHaveAttribute('aria-sort', 'ascending');"}
{"input": "Expand collapsible section", "output": "await page.getByRole('button', { name: 'Expand details' }).click();"}
{"input": "Verify that section content is now visible", "output": "await expect(page.getByTestId('section-content')).toBeVisible();"}
{"input": "Submit form by pressing Enter in input field", "output": "await page.getByLabel('Search').press('Enter');"}
{"input": "Verify that search results are displayed", "output": "await expect(page.getByTestId('search-results')).toBeVisible();"}
{"input": "Check that no results message appears", "output": "await expect(page.getByText('No results found')).toBeVisible();"}
{"input": "Toggle dark mode switch", "output": "await page.getByRole('switch', { name: 'Dark mode' }).click();"}
{"input": "Verify that dark theme is applied", "output": "await expect(page.locator('body')).toHaveClass(/dark-theme/);"}
{"input": "Open user profile dropdown", "output": "await page.getByTestId('user-menu-trigger').click();"}
{"input": "Select logout option from dropdown", "output": "await page.getByRole('menuitem', { name: 'Logout' }).click();"}
{"input": "Confirm logout in confirmation dialog", "output": "await page.getByRole('button', { name: 'Confirm' }).click();"}
{"input": "Verify user is redirected to login page", "output": "await expect(page).toHaveURL('/login');"}
{"input": "Check that session has ended", "output": "await expect(page.getByText('Please sign in')).toBeVisible();"}
{"input": "Click element with XPath //button[@data-testid='submit-btn']", "output": "await page.locator(\"//button[@data-testid='submit-btn']\").click();"}
{"input": "Fill input field with CSS selector #username with value 'admin'", "output": "await page.locator('#username').fill('admin');"}
{"input": "Verify element with data-attribute data-role='notification' contains text 'Success'", "output": "await expect(page.locator(\"[data-role='notification']\")).toContainText('Success');"}
{"input": "Click button inside div with class .modal-footer that has text 'Confirm'", "output": "await page.locator('.modal-footer').getByRole('button', { name: 'Confirm' }).click();"}
{"input": "Select option with value 'premium' from dropdown with name attribute 'subscription'", "output": "await page.locator('select[name=\"subscription\"]').selectOption('premium');"}
{"input": "Verify input with placeholder 'Enter email address' has value 'test@example.com'", "output": "await expect(page.getByPlaceholder('Enter email address')).toHaveValue('test@example.com');"}
{"input": "Click the nth(2) element in list with role 'listbox'", "output": "await page.getByRole('listbox').getByRole('option').nth(2).click();"}
{"input": "Fill textarea with id 'comments' with multiline text containing 'Line 1\\nLine 2'", "output": "await page.locator('#comments').fill('Line 1\\nLine 2');"}
{"input": "Verify element with aria-label 'Close dialog' is visible and enabled", "output": "await expect(page.getByLabel('Close dialog')).toBeVisible(); await expect(page.getByLabel('Close dialog')).toBeEnabled();"}
{"input": "Click radio button with value 'monthly' in fieldset with legend 'Billing Cycle'", "output": "await page.getByRole('group', { name: 'Billing Cycle' }).getByRole('radio', { name: 'monthly' }).click();"}
{"input": "Scroll down and click on the login button with text 'Login'", "output": "await page.evaluate(() => window.scrollBy(0, 500)); await page.getByRole('button', { name: 'Login' }).click();"}
{"input": "Wait for loading to finish and then verify success message appears", "output": "await page.getByTestId('loading-spinner').waitFor({ state: 'hidden' }); await expect(page.getByText('Operation completed successfully')).toBeVisible();"}
{"input": "Fill registration form: first name 'John', last name 'Doe', email 'john@example.com'", "output": "await page.getByLabel('First Name').fill('John'); await page.getByLabel('Last Name').fill('Doe'); await page.getByLabel('Email').fill('john@example.com');"}
{"input": "Navigate to products page and wait for products to load", "output": "await page.goto('/products'); await page.waitForSelector('[data-testid=\"product-list\"]');"}
{"input": "Search for 'iPhone' and verify at least 3 results are shown", "output": "await page.getByPlaceholder('Search products').fill('iPhone'); await page.getByRole('button', { name: 'Search' }).click(); await expect(page.getByTestId('search-results').getByRole('article')).toHaveCount({ min: 3 });"}
{"input": "Add item to cart and verify cart count increases", "output": "const initialCount = await page.getByTestId('cart-count').textContent(); await page.getByRole('button', { name: 'Add to Cart' }).click(); await expect(page.getByTestId('cart-count')).not.toHaveText(initialCount);"}
{"input": "Login with username 'testuser', password 'password123', and check welcome message", "output": "await page.getByLabel('Username').fill('testuser'); await page.getByLabel('Password').fill('password123'); await page.getByRole('button', { name: 'Sign In' }).click(); await expect(page.getByText('Welcome, testuser')).toBeVisible();"}
{"input": "Open modal, fill form data, submit and verify confirmation", "output": "await page.getByRole('button', { name: 'Open Form' }).click(); await page.getByLabel('Name').fill('Test User'); await page.getByLabel('Email').fill('test@example.com'); await page.getByRole('button', { name: 'Submit' }).click(); await expect(page.getByText('Form submitted successfully')).toBeVisible();"}
{"input": "Filter table by status 'Active' and verify filtered results", "output": "await page.getByLabel('Status Filter').selectOption('Active'); await page.getByRole('button', { name: 'Apply Filter' }).click(); await expect(page.getByRole('cell', { name: 'Active' })).toHaveCount({ min: 1 });"}
{"input": "Scroll to element with data-testid 'footer' and click newsletter signup", "output": "await page.getByTestId('footer').scrollIntoViewIfNeeded(); await page.getByTestId('footer').getByRole('button', { name: 'Subscribe' }).click();"}
{"input": "Upload multiple files and verify upload progress", "output": "await page.getByLabel('Upload Files').setInputFiles(['file1.pdf', 'file2.jpg']); await expect(page.getByText('Uploading...')).toBeVisible(); await expect(page.getByText('Upload complete')).toBeVisible();"}
{"input": "Switch tabs, perform action, and return to original tab", "output": "const [newTab] = await Promise.all([context.waitForEvent('page'), page.getByText('Open in New Tab').click()]); await newTab.getByRole('button', { name: 'Action' }).click(); await newTab.close(); await page.bringToFront();"}
{"input": "Perform drag and drop from element with id 'source' to element with id 'target'", "output": "await page.locator('#source').dragTo(page.locator('#target'));"}
{"input": "Right-click on image, select 'Save As' from context menu", "output": "await page.getByRole('img', { name: 'Product Image' }).click({ button: 'right' }); await page.getByText('Save As').click();"}
{"input": "Hover over menu item 'Products' and click submenu item 'Electronics'", "output": "await page.getByRole('menuitem', { name: 'Products' }).hover(); await page.getByRole('menuitem', { name: 'Electronics' }).click();"}
{"input": "Fill date picker with date '2024-12-25' using keyboard input", "output": "await page.getByLabel('Date').click(); await page.keyboard.type('12/25/2024');"}
{"input": "Verify table has exactly 10 rows and sort by 'Name' column", "output": "await expect(page.getByRole('row')).toHaveCount(11); await page.getByRole('columnheader', { name: 'Name' }).click();"}
{"input": "Check multiple checkboxes in a list and verify selection count", "output": "await page.getByRole('checkbox', { name: 'Item 1' }).check(); await page.getByRole('checkbox', { name: 'Item 2' }).check(); await expect(page.getByText('2 items selected')).toBeVisible();"}
{"input": "Complete wizard: step 1 form, click next, step 2 form, click finish", "output": "await page.getByLabel('Step 1 Field').fill('Value 1'); await page.getByRole('button', { name: 'Next' }).click(); await page.getByLabel('Step 2 Field').fill('Value 2'); await page.getByRole('button', { name: 'Finish' }).click();"}
{"input": "Test keyboard navigation: tab through form fields and submit with Enter", "output": "await page.keyboard.press('Tab'); await page.keyboard.type('First Value'); await page.keyboard.press('Tab'); await page.keyboard.type('Second Value'); await page.keyboard.press('Tab'); await page.keyboard.press('Enter');"}
{"input": "Mock API call, trigger action, and verify mocked response is used", "output": "await page.route('**/api/users', route => route.fulfill({ json: [{ name: 'Mock User' }] })); await page.getByRole('button', { name: 'Load Users' }).click(); await expect(page.getByText('Mock User')).toBeVisible();"}
{"input": "Verify responsive behavior: resize to mobile, check mobile menu, resize to desktop", "output": "await page.setViewportSize({ width: 375, height: 667 }); await expect(page.getByTestId('mobile-menu-toggle')).toBeVisible(); await page.setViewportSize({ width: 1200, height: 800 }); await expect(page.getByTestId('desktop-nav')).toBeVisible();"}
{"input": "Handle alert dialog: trigger action that shows alert, verify message, and accept", "output": "page.once('dialog', dialog => { expect(dialog.message()).toBe('Are you sure?'); dialog.accept(); }); await page.getByRole('button', { name: 'Delete' }).click();"}
{"input": "Test form validation: submit empty form, verify errors, fill correctly, submit successfully", "output": "await page.getByRole('button', { name: 'Submit' }).click(); await expect(page.getByText('Required field')).toBeVisible(); await page.getByLabel('Name').fill('Valid Name'); await page.getByRole('button', { name: 'Submit' }).click(); await expect(page.getByText('Success')).toBeVisible();"}
