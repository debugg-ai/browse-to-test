#!/usr/bin/env python3
"""
Test script generated by browse-to-test.

This script uses shared utilities from the test_setup package.
"""

import asyncio
from playwright.async_api import async_playwright

from browse_to_test.language_utils.test_setup_python.test_utilities import (TestActionError, replace_sensitive_data, safe_action, try_locate_and_act)
from browse_to_test.language_utils.test_setup_python.framework_helpers import (safe_action, try_locate_and_act)

# Generated test script using browse-to-test
# Framework: playwright
# Language: python
# This script was automatically generated from browser automation data
import asyncio
import json
from playwright.async_api import async_playwright, Page, BrowserContext

# Load environment variables
load_dotenv(override=True)

# Helper function for replacing sensitive data
# Custom exception for test failures
# Helper function for robust action execution
    try:
        locator = page.locator(selector).first

        if action_type == 'click':
            await locator.click(timeout=10000)
        elif action_type == 'fill' and text is not None:
            await locator.fill(text, timeout=10000)
        else:
            raise ValueError(f'Unknown action type: {action_type}')

        print(f'  ✓ {action_type} successful')
        await page.wait_for_timeout(500)

    except Exception as e:
        error_msg = f'Element interaction failed: {e} ({step_info})'
        print(f'  ✗ {error_msg}', file=sys.stderr)
        raise TestActionError(error_msg) from e

async def run_test():
    """Main test function."""
    exit_code = 0
    start_time = None
    try:
        start_time = asyncio.get_event_loop().time()
        async with async_playwright() as p:
            print('Starting chromium browser...')
            browser = await p.chromium.launch(
                headless=False,
                timeout=30000,
            )

            context = await browser.new_context(
                viewport={'width': 1280, 'height': 720},
            )

            page = await context.new_page()
            print('Browser context created')

            # Step 1
            # Step metadata: {'step_index': 0, 'actions': [{'action_type': 'go_to_url', 'parameters': {'url': 'https://example.com/login'}, 'selector_info': {}}]}

            # Step 2
            # Step metadata: {'step_index': 1, 'actions': [{'action_type': 'input_text', 'parameters': {'text': '<secret>username</secret>'}, 'selector_info': {'css_selector': '#username'}}]}

            # Step 3
            # Step metadata: {'step_index': 2, 'actions': [{'action_type': 'input_text', 'parameters': {'text': '<secret>password</secret>'}, 'selector_info': {'css_selector': '#password'}}]}

            # Step 4
            # Step metadata: {'step_index': 3, 'actions': [{'action_type': 'click_element', 'parameters': {}, 'selector_info': {'css_selector': "button[type='submit']"}}]}

            print('Test completed successfully')
            await context.close()
            await browser.close()
            print('Browser closed')
    except TestActionError as e:
        print(f'Test failed: {e}', file=sys.stderr)
        exit_code = 1
    except Exception as e:
        print(f'Unexpected error: {e}', file=sys.stderr)
        traceback.print_exc()
        exit_code = 1
    finally:
        if start_time:
            elapsed = asyncio.get_event_loop().time() - start_time
            print(f'Test execution time: {elapsed:.2f} seconds')
        if exit_code != 0:
            sys.exit(exit_code)

if __name__ == '__main__':
    if os.name == 'nt':
        asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
    asyncio.run(run_test())