#!/usr/bin/env python3
"""
Shared test utilities generated by browse-to-test.

This file contains reusable helper functions, exception classes,
and utilities that can be imported by test scripts.
"""

from pathlib import Path
from playwright.async_api import Page
import json
import sys

# Custom assertion helpers

# Assert element text content matches expected value
async def assert_element_text(page: Page, selector: str, expected_text: str):
    """Assert that an element contains the expected text."""
    element = page.locator(selector).first
    actual_text = await element.text_content()
    if expected_text not in actual_text:
        raise AssertionError(f"Expected '{expected_text}' in element text, got '{actual_text}'")


# Test data management

# Load test data from JSON files
def load_test_data(file_path: str) -> dict:
    """Load test data from JSON file."""
    import json
    from pathlib import Path
    
    data_file = Path(file_path)
    if not data_file.exists():
        raise FileNotFoundError(f"Test data file not found: {file_path}")
    
    with open(data_file, 'r') as f:
        return json.load(f)


# Custom exception classes

# Custom exception for test action failures
class TestActionError(Exception):
    """Exception raised when a test action fails."""
    pass


# Framework-specific utilities

# Safe action execution with error handling for Playwright
async def safe_action(page: Page, action_func, *args, step_info: str = '', **kwargs):
    """Execute an action with error handling."""
    try:
        return await action_func(*args, **kwargs)
    except Exception as e:
        if step_info:
            print(f'Action failed ({step_info}): {e}', file=sys.stderr)
        else:
            print(f'Action failed: {e}', file=sys.stderr)
        raise TestActionError(f'Action failed: {e}') from e


# Robust element location and interaction for Playwright
async def try_locate_and_act(page: Page, selector: str, action_type: str, text: str = None, step_info: str = ''):
    """Locate element and perform action with fallback."""
    print(f'Attempting {action_type} using selector: {selector} ({step_info})')
    
    try:
        locator = page.locator(selector).first
        
        if action_type == 'click':
            await locator.click(timeout=10000)
        elif action_type == 'fill' and text is not None:
            await locator.fill(text, timeout=10000)
        else:
            raise ValueError(f'Unknown action type: {action_type}')
        
        print(f'  ✓ {action_type} successful')
        await page.wait_for_timeout(500)
        
    except Exception as e:
        error_msg = f'Element interaction failed: {e} ({step_info})'
        print(f'  ✗ {error_msg}', file=sys.stderr)
        raise TestActionError(error_msg) from e


# Helper functions for test actions

# Replace sensitive data placeholders in strings
def replace_sensitive_data(text: str, sensitive_map: dict) -> str:
    """Replace sensitive data placeholders in text."""
    if not isinstance(text, str):
        return text
    for placeholder, value in sensitive_map.items():
        replacement_value = str(value) if value is not None else ''
        text = text.replace(f'<secret>{placeholder}</secret>', replacement_value)
    return text

