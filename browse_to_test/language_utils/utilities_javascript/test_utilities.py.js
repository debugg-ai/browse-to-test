/**
 * Shared test utilities generated by browse-to-test.
 *
 * This file contains reusable helper functions, exception classes,
 * and utilities that can be imported by test scripts.
 */

const { Page } = require('@playwright/test')

// Custom assertion helpers

// Assert that an element is visible on the page
export async function assertElementVisible(page, selector) {
    const element = page.locator(selector).first();
    await element.waitFor({ state: 'visible', timeout: 10000 });
}


// Custom exception classes

// Custom exception for test action failures
export class TestActionError extends Error {
    constructor(message: string) {
        super(message);
        this.name = 'TestActionError';
    }
}


// Framework-specific utilities

// Safe action execution with error handling for Playwright
export async function safeAction(page, actionFunc, stepInfo = '') {
    try {
        return await actionFunc();
    } catch (error) {
        const errorMessage = error instanceof Error ? error.message : String(error);
        if (stepInfo) {
            console.error(`Action failed (${stepInfo}): ${errorMessage}`);
        } else {
            console.error(`Action failed: ${errorMessage}`);
        }
        throw new TestActionError(`Action failed: ${errorMessage}`);
    }
}


// Robust element location and interaction for Playwright
// try_locate_and_act not implemented for javascript + playwright


// Helper functions for test actions

// Replace sensitive data placeholders in strings
export function replaceSensitiveData(text: string, sensitiveMap: Record<string, any>): string {
    if (typeof text !== 'string') {
        return text;
    }
    
    for (const [placeholder, value] of Object.entries(sensitiveMap)) {
        const replacementValue = value !== null && value !== undefined ? String(value) : '';
        text = text.replace(`<secret>${placeholder}</secret>`, replacementValue);
    }
    
    return text;
}

