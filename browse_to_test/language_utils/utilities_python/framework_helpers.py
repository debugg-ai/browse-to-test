#!/usr/bin/env python3
"""
Framework-specific test helpers generated by browse-to-test.
"""

# Playwright Helpers

from playwright.async_api import Page
import sys

# Safe action execution with error handling for Playwright
async def safe_action(page: Page, action_func, *args, step_info: str = '', **kwargs):
    """Execute an action with error handling."""
    try:
        return await action_func(*args, **kwargs)
    except Exception as e:
        if step_info:
            print(f'Action failed ({step_info}): {e}', file=sys.stderr)
        else:
            print(f'Action failed: {e}', file=sys.stderr)
        raise TestActionError(f'Action failed: {e}') from e


# Robust element location and interaction for Playwright
async def try_locate_and_act(page: Page, selector: str, action_type: str, text: str = None, step_info: str = ''):
    """Locate element and perform action with fallback."""
    print(f'Attempting {action_type} using selector: {selector} ({step_info})')
    
    try:
        locator = page.locator(selector).first
        
        if action_type == 'click':
            await locator.click(timeout=10000)
        elif action_type == 'fill' and text is not None:
            await locator.fill(text, timeout=10000)
        else:
            raise ValueError(f'Unknown action type: {action_type}')
        
        print(f'  ✓ {action_type} successful')
        await page.wait_for_timeout(500)
        
    except Exception as e:
        error_msg = f'Element interaction failed: {e} ({step_info})'
        print(f'  ✗ {error_msg}', file=sys.stderr)
        raise TestActionError(error_msg) from e

