/**
 * Framework-specific test helpers generated by browse-to-test.
 */

// Playwright Helpers

import { Page } from '@playwright/test'

// Safe action execution with error handling for Playwright
export async function safeAction<T>(
    page: Page, 
    actionFunc: () => Promise<T>, 
    stepInfo: string = ''
): Promise<T> {
    try {
        return await actionFunc();
    } catch (error) {
        const errorMessage = error instanceof Error ? error.message : String(error);
        if (stepInfo) {
            console.error(`Action failed (${stepInfo}): ${errorMessage}`);
        } else {
            console.error(`Action failed: ${errorMessage}`);
        }
        throw new TestActionError(`Action failed: ${errorMessage}`);
    }
}


// Robust element location and interaction for Playwright
export async function tryLocateAndAct(
    page: Page, 
    selector: string, 
    actionType: string, 
    text?: string, 
    stepInfo: string = ''
): Promise<void> {
    console.log(`Attempting ${actionType} using selector: ${selector} (${stepInfo})`);
    
    try {
        const locator = page.locator(selector).first();
        
        if (actionType === 'click') {
            await locator.click({ timeout: 10000 });
        } else if (actionType === 'fill' && text !== undefined) {
            await locator.fill(text, { timeout: 10000 });
        } else {
            throw new Error(`Unknown action type: ${actionType}`);
        }
        
        console.log(`  ✓ ${actionType} successful`);
        await page.waitForTimeout(500);
        
    } catch (error) {
        const errorMessage = error instanceof Error ? error.message : String(error);
        const errorMsg = `Element interaction failed: ${errorMessage} (${stepInfo})`;
        console.error(`  ✗ ${errorMsg}`);
        throw new TestActionError(errorMsg);
    }
}

